(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[968],{3529:function(e,n,r){(window.__NEXT_P=window.__NEXT_P||[]).push(["/config/cross_dep",function(){return r(7065)}])},7065:function(e,n,r){"use strict";r.r(n),r.d(n,{__toc:function(){return d}});var i=r(2676),s=r(3313),t=r(8136),c=r(2534);r(681);var l=r(5594);let d=[{depth:2,value:"matchCacheRule",id:"matchcacherule"},{depth:2,value:"normalizeUrl",id:"normalizeurl"},{depth:2,value:"matchUpdateRule",id:"matchupdaterule"}];function o(e){let n=Object.assign({h1:"h1",p:"p",pre:"pre",code:"code",span:"span",h2:"h2",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",ul:"ul",li:"li",a:"a"},(0,l.a)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{children:"双期函数依赖"}),"\n",(0,i.jsx)(n.p,{children:"  该分类下所有配置项均同时在构建期和运行时生效，其中的内容会被写入到 sw 中。"}),"\n",(0,i.jsx)(n.p,{children:"  设置该值时需要按照如下格式进行："}),"\n",(0,i.jsx)(n.pre,{"data-language":"typescript","data-theme":"default",children:(0,i.jsxs)(n.code,{"data-language":"typescript","data-theme":"default",children:[(0,i.jsxs)(n.span,{className:"line",children:[(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:"const"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-constant)"},children:"example"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:"="}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" {"})]}),"\n",(0,i.jsxs)(n.span,{className:"line",children:[(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-function)"},children:"runOnBrowser"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:":"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" (args) "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:"=>"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" {}"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:","})]}),"\n",(0,i.jsxs)(n.span,{className:"line",children:[(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-function)"},children:"runOnNode"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:":"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:"function"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"(args) {}"})]}),"\n",(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"}"})})]})}),"\n",(0,i.jsxs)(n.p,{children:["  其中 ",(0,i.jsx)(n.code,{children:"runOnBrowser"})," 表示在浏览器端运行的代码，",(0,i.jsx)(n.code,{children:"runOnNode"})," 表示在 NodeJs 端运行的代码，",(0,i.jsx)(n.code,{children:"runOnNode"})," 中可以使用 ",(0,i.jsx)(n.code,{children:"this"})," 调用 ",(0,i.jsx)(n.code,{children:"runOnBrowser"}),"。"]}),"\n",(0,i.jsx)(n.h2,{id:"matchcacherule",children:"matchCacheRule"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{align:"center",children:"类型"}),(0,i.jsx)(n.th,{align:"left",children:"说明"}),(0,i.jsx)(n.th,{align:"center",children:"默认值"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{align:"center",children:(0,i.jsx)(n.code,{children:"(url: URL) => number | false | null | undefined"})}),(0,i.jsx)(n.td,{align:"left",children:"判断一个资源是否需要缓存"}),(0,i.jsx)(n.td,{align:"center",children:(0,i.jsx)(n.code,{children:"() => false"})})]})})]}),"\n",(0,i.jsx)(n.p,{children:"  该项用于判断一个资源是否需要被前端缓存，其中各个返回值的含义如下："}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"false"})," ",(0,i.jsx)(n.code,{children:"null"})," ",(0,i.jsx)(n.code,{children:"undefined"})," 或 ",(0,i.jsx)(n.code,{children:"0"}),"：表示不需要缓存"]}),"\n",(0,i.jsx)(n.li,{children:"正数：表示需要缓存，缓存类型为定时缓存，单位为毫秒，超过指定时间后缓存自动失效"}),"\n",(0,i.jsx)(n.li,{children:"负数：表示需要缓存，缓存类型为永久缓存，仅能通过增量更新失效"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"normalizeurl",children:"normalizeUrl"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{align:"center",children:"类型"}),(0,i.jsx)(n.th,{align:"left",children:"说明"}),(0,i.jsx)(n.th,{align:"center",children:"默认值"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{align:"center",children:(0,i.jsx)(n.code,{children:"(url: string) => string"})}),(0,i.jsx)(n.td,{align:"left",children:"归一化 URL"}),(0,i.jsx)(n.td,{align:"center",children:"省略"})]})})]}),"\n",(0,i.jsx)(n.p,{children:"  该项用于将链接进行归一化，归一化的作用是防止目标相同但连接形式不同的资源被重复缓存。默认的实现会对 HTML 资源的 URL 进行处理："}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["如果链接以 ",(0,i.jsx)(n.code,{children:"/index.html"})," 结尾会被替换为 ",(0,i.jsx)(n.code,{children:"/"})]}),"\n",(0,i.jsxs)(n.li,{children:["如果链接以 ",(0,i.jsx)(n.code,{children:"/xxx.html"})," 结尾会被替换为 ",(0,i.jsx)(n.code,{children:"/xxx"})]}),"\n",(0,i.jsx)(n.li,{children:"否则保持原链接"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"matchupdaterule",children:"matchUpdateRule"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{align:"center",children:"类型"}),(0,i.jsx)(n.th,{align:"left",children:"说明"}),(0,i.jsx)(n.th,{align:"center",children:"默认值"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{align:"center",children:(0,i.jsx)(n.code,{children:"(exp: UpdateChangeExp) => ((url: string) => boolean | undefined | null)"})}),(0,i.jsx)(n.td,{align:"left",children:"匹配缓存更新规则"}),(0,i.jsx)(n.td,{align:"center",children:"省略"})]})})]}),"\n",(0,i.jsxs)(n.p,{children:["  该项用于判断一个 ",(0,i.jsx)(n.code,{children:"UpdateChangeExp"})," 应当如何被程序理解，返回一个函数，该函数用于判断指定资源是否应该被刷新。"]}),"\n",(0,i.jsxs)(n.p,{children:["  内置的规则已经可以满足大多数情况的要求，一般只有需要自定义新的规则时才需要修改该项，具体的实现可以参考 ",(0,i.jsx)(n.a,{href:"https://github.com/EmptyDreams/swpp-backends/blob/v3/src/swpp/database/CrossDepCode.ts#L64",children:"源代码"}),"。"]})]})}let a={MDXContent:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,l.a)(),e.components);return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)},pageOpts:{filePath:"pages/config/cross_dep.mdx",route:"/config/cross_dep",timestamp:172363484e4,pageMap:[{kind:"Meta",data:{index:"介绍",quickstart:"快速开始",config:"配置文件"}},{kind:"Folder",name:"config",route:"/config",children:[{kind:"Meta",data:{compilation_env:"CompilationEnv",cross_env:"CrossEnv",runtime_dep:"RuntimeDep",cross_dep:"CrossDep",runtime_core:"RuntimeCore",runtime_event:"RuntimeEvent",dom_config:"DomConfig",modifier:"Modifier"}},{kind:"MdxPage",name:"compilation_env",route:"/config/compilation_env"},{kind:"MdxPage",name:"cross_dep",route:"/config/cross_dep"},{kind:"MdxPage",name:"cross_env",route:"/config/cross_env"},{kind:"MdxPage",name:"dom_config",route:"/config/dom_config"},{kind:"MdxPage",name:"modifier",route:"/config/modifier"},{kind:"MdxPage",name:"runtime_core",route:"/config/runtime_core"},{kind:"MdxPage",name:"runtime_dep",route:"/config/runtime_dep"},{kind:"MdxPage",name:"runtime_event",route:"/config/runtime_event"}]},{kind:"MdxPage",name:"config",route:"/config"},{kind:"MdxPage",name:"index",route:"/"},{kind:"MdxPage",name:"quickstart",route:"/quickstart"}],flexsearch:{codeblocks:!0},title:"双期函数依赖",headings:d},pageNextRoute:"/config/cross_dep",nextraLayout:t.ZP,themeConfig:c.Z};n.default=(0,s.j)(a)},2534:function(e,n,r){"use strict";var i=r(2676);r(5271);var s=r(5458);let t="swpp";n.Z={logo:(0,i.jsx)("span",{children:t}),project:{link:"https://github.com/EmptyDreams/swpp-backends"},docsRepositoryBase:"https://github.com/EmptyDreams/swpp_document/tree/main/",useNextSeoProps:()=>({titleTemplate:"%s – ".concat(t)}),footer:{text:"\xa9 2024-present ".concat(t)},...s.Z}},5184:function(){}},function(e){e.O(0,[580,888,774,179],function(){return e(e.s=3529)}),_N_E=e.O()}]);